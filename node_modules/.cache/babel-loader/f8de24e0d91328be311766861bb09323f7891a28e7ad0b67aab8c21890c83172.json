{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\world\\\\OneDrive\\\\Desktop\\\\landingshop\\\\frontend\\\\src\\\\WhyThisCompany\\\\WhyThisCompany.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './WhyThisCompany.css';\nimport whyReasons from './whyData';\nimport InformationModal from '../InformationModal/InformationModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WhyThisCompany() {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [data, setData] = useState([]);\n  const [showInformationModal, setShowInformationModal] = useState(false);\n  const [errorModal, setErrorModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n  const isLoggedIn = localStorage.getItem('isLoggedIn');\n\n  // Функция для загрузки данных с сервера\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/why_this_company');\n        if (response.ok) {\n          const result = await response.json();\n          if (result.blocks.length > 0) {\n            // Заполняем данные картинками из массива, если они отсутствуют\n            const updatedData = result.blocks.map((block, index) => ({\n              ...block,\n              image: block.image || whyReasons[index].image,\n              // Если нет картинки на сервере, берем из whyReasons\n              alt: block.alt || whyReasons[index].alt\n            }));\n            setData(updatedData);\n          } else {\n            setData(whyReasons); // Если данных нет, используем дефолтные\n          }\n        } else {\n          setShowInformationModal(true);\n          setErrorModal(true);\n          setModalMessage('Ошибка при загрузке данных');\n          setData(whyReasons); // В случае ошибки загружаем дефолтные данные\n        }\n      } catch (error) {\n        console.error('Ошибка:', error);\n        setData(whyReasons); // В случае ошибки сети загружаем дефолтные данные\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Функция для редактирования данных\n  const handleChange = (index, field, value) => {\n    const updatedData = [...data];\n    updatedData[index][field] = value;\n    setData(updatedData);\n  };\n  const saveData = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/why_this_company', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: \"Почему нас выбирают?\",\n          blocks: data.map(block => ({\n            ...block,\n            image: block.image || '/static/images/default-image.jpg' // Устанавливаем дефолтное изображение, если нет\n          }))\n        })\n      });\n      if (response.ok) {\n        setShowInformationModal(true);\n        setErrorModal(false);\n        setModalMessage('Данные успешно обновлены!');\n        setIsEditing(false);\n      } else {\n        setShowInformationModal(true);\n        setErrorModal(true);\n        setModalMessage('Произошла ошибка при обновлении данных');\n      }\n    } catch (error) {\n      console.error('Ошибка:', error);\n      setShowInformationModal(true);\n      setErrorModal(true);\n      setModalMessage('Произошла ошибка при обновлении данных');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"why__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"why__title\",\n      children: \"\\u041F\\u043E\\u0447\\u0435\\u043C\\u0443 \\u043D\\u0430\\u0441 \\u0432\\u044B\\u0431\\u0438\\u0440\\u0430\\u044E\\u0442?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), isLoggedIn && !isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"why__edit-button\",\n      onClick: () => setIsEditing(true),\n      children: \"\\u270F\\uFE0F \\u0412\\u043D\\u0435\\u0441\\u0442\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"why__blocks-wrapper\",\n      children: data.map((reason, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"why__block\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"why__image-content\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"why__image\",\n            src: reason.image,\n            alt: reason.alt || 'Изображение'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"why__text-content\",\n          children: isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"why__block-title-edit\",\n              value: reason.title_block,\n              onChange: e => handleChange(index, 'title_block', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"why__block-text-edit\",\n              value: reason.block_descr,\n              onChange: e => handleChange(index, 'block_descr', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"why__block-title\",\n              children: reason.title_block\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"why__block-text\",\n              children: reason.block_descr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"why__number-block\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this)]\n      }, reason.id || index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"why__save-button\",\n      onClick: saveData,\n      children: \"\\uD83D\\uDCBE \\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this), showInformationModal && /*#__PURE__*/_jsxDEV(InformationModal, {\n      isError: errorModal,\n      modalMessage: modalMessage,\n      onClose: () => setShowInformationModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(WhyThisCompany, \"q1i1jJyLdzzI38q0JhZNZILiiwk=\");\n_c = WhyThisCompany;\nvar _c;\n$RefreshReg$(_c, \"WhyThisCompany\");","map":{"version":3,"names":["useState","useEffect","whyReasons","InformationModal","jsxDEV","_jsxDEV","Fragment","_Fragment","WhyThisCompany","_s","isEditing","setIsEditing","data","setData","showInformationModal","setShowInformationModal","errorModal","setErrorModal","modalMessage","setModalMessage","isLoggedIn","localStorage","getItem","fetchData","response","fetch","ok","result","json","blocks","length","updatedData","map","block","index","image","alt","error","console","handleChange","field","value","saveData","method","headers","body","JSON","stringify","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","reason","src","title_block","onChange","e","target","block_descr","id","isError","onClose","_c","$RefreshReg$"],"sources":["C:/Users/world/OneDrive/Desktop/landingshop/frontend/src/WhyThisCompany/WhyThisCompany.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport './WhyThisCompany.css';\r\nimport whyReasons from './whyData';\r\nimport InformationModal from '../InformationModal/InformationModal';\r\n\r\nexport default function WhyThisCompany() {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const [showInformationModal, setShowInformationModal] = useState(false);\r\n    const [errorModal, setErrorModal] = useState(false);\r\n    const [modalMessage, setModalMessage] = useState('');\r\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\r\n\r\n    // Функция для загрузки данных с сервера\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/why_this_company');\r\n                if (response.ok) {\r\n                    const result = await response.json();\r\n                    if (result.blocks.length > 0) {\r\n                        // Заполняем данные картинками из массива, если они отсутствуют\r\n                        const updatedData = result.blocks.map((block, index) => ({\r\n                            ...block,\r\n                            image: block.image || whyReasons[index].image,  // Если нет картинки на сервере, берем из whyReasons\r\n                            alt: block.alt || whyReasons[index].alt,\r\n                        }));\r\n                        setData(updatedData);\r\n                    } else {\r\n                        setData(whyReasons); // Если данных нет, используем дефолтные\r\n                    }\r\n                } else {\r\n                    setShowInformationModal(true);\r\n                    setErrorModal(true);\r\n                    setModalMessage('Ошибка при загрузке данных');\r\n                    setData(whyReasons); // В случае ошибки загружаем дефолтные данные\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка:', error);\r\n                setData(whyReasons); // В случае ошибки сети загружаем дефолтные данные\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Функция для редактирования данных\r\n    const handleChange = (index, field, value) => {\r\n        const updatedData = [...data];\r\n        updatedData[index][field] = value;\r\n        setData(updatedData);\r\n    };\r\n\r\n    const saveData = async () => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/why_this_company', {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    title: \"Почему нас выбирают?\",\r\n                    blocks: data.map(block => ({\r\n                        ...block,\r\n                        image: block.image || '/static/images/default-image.jpg',  // Устанавливаем дефолтное изображение, если нет\r\n                    })),\r\n                }),\r\n            });\r\n    \r\n            if (response.ok) {\r\n                setShowInformationModal(true);\r\n                setErrorModal(false);\r\n                setModalMessage('Данные успешно обновлены!');\r\n                setIsEditing(false);\r\n            } else {\r\n                setShowInformationModal(true);\r\n                setErrorModal(true);\r\n                setModalMessage('Произошла ошибка при обновлении данных');\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n            setShowInformationModal(true);\r\n            setErrorModal(true);\r\n            setModalMessage('Произошла ошибка при обновлении данных');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='why__container'>\r\n            <h2 className='why__title'>Почему нас выбирают?</h2>\r\n\r\n            {isLoggedIn && !isEditing && (\r\n                <button className='why__edit-button' onClick={() => setIsEditing(true)}>✏️ Внести данные</button>\r\n            )}\r\n\r\n            <div className='why__blocks-wrapper'>\r\n                {data.map((reason, index) => (\r\n                    <div className='why__block' key={reason.id || index}>\r\n                        <div className='why__image-content'>\r\n                            {/* Используем изображения, полученные с сервера или из дефолтного массива */}\r\n                            <img className='why__image' src={reason.image} alt={reason.alt || 'Изображение'} />\r\n                        </div>\r\n                        <div className='why__text-content'>\r\n                            {isEditing ? (\r\n                                <>\r\n                                    <textarea\r\n                                        className='why__block-title-edit'\r\n                                        value={reason.title_block}\r\n                                        onChange={(e) => handleChange(index, 'title_block', e.target.value)}\r\n                                    />\r\n                                    <textarea\r\n                                        className='why__block-text-edit'\r\n                                        value={reason.block_descr}\r\n                                        onChange={(e) => handleChange(index, 'block_descr', e.target.value)}\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <h4 className='why__block-title'>{reason.title_block}</h4>\r\n                                    <p className='why__block-text'>{reason.block_descr}</p>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                        <div className='why__number-block'>{index + 1}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {isEditing && (\r\n                <button className='why__save-button' onClick={saveData}>💾 Сохранить</button>\r\n            )}\r\n\r\n            {showInformationModal && (<InformationModal isError={errorModal} modalMessage={modalMessage} onClose={() => setShowInformationModal(false)}/>)}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}